package com.blenderbox.holiday.views{	import com.blenderbox.events.ImageEvent;	import com.blenderbox.motion.TweenLite;	import com.blenderbox.utils.MathUtils;	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.utils.Timer;		/**	 * @author cbrown	 */	public class Polaroid extends MovieClip 	{		public var defaultAngle:Number = 15;		public var defaultX:Number = 0;		public var defaultY:Number = 0;		public var id:Number = -1;		public var caption:String = "";		public var src:String = "";				private var image:Loader;				private var dir:Number = 0;		private var force:Number = 0;		private var lastX:Number = 0;		private var n:Number = 0;		private var tempX:Number = 0;		private var tempY:Number = 0;		private var velocity:Number = 0;		private var aniTimer:Timer;				private const DEFAULT_FORCE:Number = 20;		private const MIN_FORCE:Number = 0.15;		private const TIMER_POLL:Number = 30;				public function Polaroid(id:Number, src:String, caption:String) 		{			this.id = id;			this.src = src;			this.caption = caption;			aniTimer = new Timer(TIMER_POLL);			aniTimer.addEventListener(TimerEvent.TIMER, onAniTimerFire);			addEventListener(MouseEvent.MOUSE_DOWN, onPolaroidMouseDown);			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			labelTF.text = caption;			labelTF.autoSize = TextFieldAutoSize.LEFT;			buttonMode = true;			focusRect = false;			image = new Loader();			image.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);			image.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onLoadProgress);			addChild(image);		}		// publics		public function load(imgDir:String):void {			image.load(new URLRequest(imgDir + src));			image.alpha = 0;			image.x = black.x;			image.y = black.y;		}		public function setDefaults():void {			dir = Math.random() > .5 ? 1 : -1;			defaultAngle = MathUtils.getRandomInt(3, 0) * 15 * dir;			defaultX = MathUtils.getRandomInt(stage.stageWidth - 200, 50);			var maxY:Number = defaultX > stage.stageWidth - 750 ? stage.stageHeight - 400 : stage.stageHeight - 200;			defaultY = MathUtils.getRandomInt(maxY, 50);			draw();		}		public function stopIt():void {			aniTimer.stop();		}		// privates		private function draw():void {			switch(defaultAngle) {				case -30:					white.x = -227;					break;				case -15:					white.x = -182;					break;				case 0:					white.x = -136;				case 15:					white.x = -91;					break;				case 30:					white.x = -46;					break;			}			image.x = black.x = labelTF.x = white.x + 10;		}		// event handlers		private function onAddedToStage(e:Event):void {			setDefaults();		}		private function onAniTimerFire(e:TimerEvent):void {			n += 0.3;			force *= .95;			rotation = Math.cos(n) * force * dir + defaultAngle;			if(force < MIN_FORCE) aniTimer.stop();		}		private function onLoadComplete(e:Event):void {			var bitMap:Bitmap = Bitmap(e.target.content);			bitMap.smoothing = true;			labelTF.text = caption;			labelTF.autoSize = TextFieldAutoSize.LEFT;			TweenLite.to(image, 0.4, { alpha:1 } );			this.dispatchEvent(new ImageEvent(ImageEvent.ON_LOAD));		}		private function onLoadProgress(e:ProgressEvent):void {			labelTF.text = "LOADING... " + String(int(e.bytesLoaded / e.bytesTotal * 100));			labelTF.autoSize = TextFieldAutoSize.LEFT;		}		private function onPolaroidMouseDown(e:MouseEvent):void {			this.parent.setChildIndex(this, this.parent.numChildren - 1);			tempX = this.mouseX;			tempY = this.mouseY;						lastX = stage.mouseX;			aniTimer.stop();			stage.addEventListener(MouseEvent.MOUSE_UP, onPolaroidMouseUp);			stage.addEventListener(MouseEvent.MOUSE_MOVE, onPolaroidMouseMove);		}		private function onPolaroidMouseMove(e:MouseEvent):void {			this.x = stage.mouseX - tempX;			this.y = stage.mouseY - tempY;			velocity = stage.mouseX - lastX;			TweenLite.to(this, 0.2, { rotation:velocity } );			lastX = stage.mouseX;		}		private function onPolaroidMouseUp(e:MouseEvent):void {			dir = lastX < stage.mouseX ? 1 : -1;			force = DEFAULT_FORCE;			n = 0;			stage.removeEventListener(MouseEvent.MOUSE_UP, onPolaroidMouseUp);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onPolaroidMouseMove);			TweenLite.killTweensOf(this);			aniTimer.stop();			aniTimer.start();		}	}}